import type { ImageModelV1, ImageModelV1CallWarning } from "@ai-sdk/provider";
import type { FetchFunction } from "@ai-sdk/provider-utils";
import type { Resolvable } from "@ai-sdk/provider-utils";
import { ApicoreImageSettings } from "./apicore-image-settings";

interface ApicoreImageModelConfig {
  apiKey: string;
  provider: string;
  baseURL: string;
  headers?: Resolvable<Record<string, string | undefined>>;
  fetch?: FetchFunction;
}

export class ApicoreImageModel implements ImageModelV1 {
  readonly specificationVersion = "v1";
  readonly modelId: string;
  readonly settings: ApicoreImageSettings;
  private readonly config: ApicoreImageModelConfig;

  get provider(): string {
    return this.config.provider;
  }

  get maxImagesPerCall(): number {
    return this.settings.maxImagesPerCall ?? 8;
  }

  constructor(
    modelId: string,
    settings: ApicoreImageSettings,
    config: ApicoreImageModelConfig
  ) {
    this.modelId = modelId;
    this.settings = settings;
    this.config = config;
  }

  async doGenerate({
    prompt,
    n,
    size,
    providerOptions,
    abortSignal,
  }: Parameters<ImageModelV1["doGenerate"]>[0]): Promise<
    Awaited<ReturnType<ImageModelV1["doGenerate"]>>
  > {
    const warnings: Array<ImageModelV1CallWarning> = [];
    let images: Array<Uint8Array> = [];

    try {
      // 1. 准备请求
      const apiKey = this.config.apiKey;
      if (!apiKey) {
        throw new Error("APICore API key is not set");
      }

      // 2. 构建请求体
      const requestBody = {
        prompt,
        n: n ?? 1,
        model: this.modelId,
        size: size ?? "1024x1024",
        ...(providerOptions?.apicore ?? {}),
      };

      // 3. 准备headers
      const baseHeaders: Record<string, string> = {
        "Authorization": `Bearer ${apiKey}`,
        "Content-Type": "application/json",
      };

      // 处理可能的Resolvable headers
      let additionalHeaders: Record<string, string | undefined> = {};
      if (this.config.headers) {
        if (typeof this.config.headers === 'function') {
          additionalHeaders = await this.config.headers();
        } else if (typeof this.config.headers.then === 'function') {
          additionalHeaders = await this.config.headers;
        } else {
          additionalHeaders = this.config.headers as Record<string, string | undefined>;
        }
      }

      // 过滤掉undefined值
      const filteredHeaders: Record<string, string> = {};
      Object.entries({ ...baseHeaders, ...additionalHeaders }).forEach(([key, value]) => {
        if (value !== undefined) {
          filteredHeaders[key] = value;
        }
      });

      // 4. 发送请求到APICore
      const response = await fetch(`${this.config.baseURL}/images/generations`, {
        method: "POST",
        headers: filteredHeaders,
        body: JSON.stringify(requestBody),
        signal: abortSignal,
      });

      // 5. 处理响应 - 记录原始响应信息
      console.log("APICore Response Status:", response.status);
      console.log("APICore Response Headers:", Object.fromEntries(response.headers.entries()));

      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        console.log("APICore Error Response:", JSON.stringify(errorData, null, 2));
        const errorMessage = errorData.error?.message || `HTTP error! status: ${response.status}`;
        throw new Error(errorMessage);
      }

      const result = await response.json();
      console.log("APICore Success Response:", JSON.stringify(result, null, 2));

      // 检查响应中是否有错误
      if (result.error) {
        console.log("APICore Response Contains Error:", JSON.stringify(result.error, null, 2));
        throw new Error(result.error.message || "APICore error occurred");
      }

      // 6. 处理生成的图片
      if (result.data && Array.isArray(result.data) && result.data.length > 0) {
        // 下载图片并转换为Uint8Array
        images = await Promise.all(
          result.data.map(async (item: { url: string }) => {
            const imageResponse = await fetch(item.url);
            if (!imageResponse.ok) {
              throw new Error(`Failed to download image from ${item.url}`);
            }
            const arrayBuffer = await imageResponse.arrayBuffer();
            return new Uint8Array(arrayBuffer);
          })
        );
      } else {
        throw new Error("No images generated by APICore");
      }
    } catch (error: any) {
      // 重新抛出错误，不要只添加到warnings
      throw error;
    }

    return {
      images,
      warnings,
      response: {
        timestamp: new Date(),
        modelId: this.modelId,
        headers: undefined,
      },
    };
  }
}